services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    container_name: receiptly_postgres
    environment:
      POSTGRES_DB: receiptly
      POSTGRES_USER: receiptly
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-12345678}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - receiptly_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U receiptly -d receiptly"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: receiptly_backend
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://receiptly:${POSTGRES_PASSWORD:-12345678}@postgres:5432/receiptly"
      
      # Server Configuration
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: ${DEBUG:-false}
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,https://receiptly.leonberkemeier.de}
      
      # Authentication Configuration
      SECRET_KEY: ${SECRET_KEY:-your-very-secure-secret-key-change-this-in-production-make-it-long-and-random}
      
      # Python Configuration
      PYTHONPATH: /app
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    # volumes:
      # Uncomment for development (hot reload)
      # - .:/app
      # - /app/venv
    networks:
      - receiptly_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Note: Using external Caddy reverse proxy
  # Backend is exposed on port 8000 for Caddy to proxy

networks:
  receiptly_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
